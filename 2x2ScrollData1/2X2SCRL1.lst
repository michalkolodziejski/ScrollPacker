mads 2.0.6 build 58 (28 Jan 17)
     1 				; "2x2 scroll, example 1", Atari XL/XE Intro
     2 				;
     3 				; what it does:
     4 				; - 2x2-character scroll in ANTIC mode 2
     5 				; - supports up to 64 unique 2x2-fonts
     6 				; - fonts come from several separate input font sets
     7 				; - length of scroll is limited by available memory only
     8 				; - uses DLI to set character base address for upper and lower parts of fonts
     9 				;
    10 				; code by tr1x / Agenda
    11 				; requirements: original Atari XL/XE 64KB PAL
    12 				; version: 1.0
    13 				; date: 2020-05-24
    14
    15 				.IF fonts0e - fonts0 > 1024
    16 				    .ERROR 'Fonts data is too big! This method supports up to 64 unique '\
    17 				           '2x2-fonts. Please, check the other example which allows you '\
    18 				           'to have more unique 2x2-fonts.'
    18 				    .ERROR 'Fonts data is too big! This method supports up to 64 unique '           '2x2-fonts. Please, check the other example which allows you '           'to have more unique 2x2-fonts.'
    19 				.ENDIF
    20
    21 = 4000			video1	equ $4000
    22 = 4040			video2	equ $4040
    23
    24 = 0012			rtclok	equ $0012
    25 = 00C0			txtptr	equ $00c0
    26 = 0200			vdslst	equ $0200
    27 = 0230			sdlstl	equ $0230
    28 = D404			hscrol	equ $d404
    29 = D409			chbase	equ $d409
    30 = D40A			wsync	equ $d40a
    31 = D40B			vcount	equ $d40b
    32 = D40E			nmien	equ $d40e
    33 = FFFA			nmivec	equ $fffa
    34
    35 					org $600
    36
    37 					; wait one frame
    38 FFFF> 0600-06B8> A5 14		lda rtclok+2
    39 0602 C5 14		wait	cmp rtclok+2
    40 0604 F0 FC			beq wait
    41
    42 					; set DLI routine
    43 0606 A9 40			lda #$40
    44 0608 8D 0E D4			sta nmien	; disable DLI
    45 060B A9 83			lda #<dli1
    46 060D 8D 00 02			sta vdslst
    47 0610 A9 06			lda #>dli1
    48 0612 8D 01 02			sta vdslst+1
    49 0615 A9 C0			lda #$c0
    50 0617 8D 0E D4			sta nmien	; enable DLI
    51
    52 					; set display list
    53 061A A9 AD			lda #<dlist
    54 061C 8D 30 02			sta sdlstl
    55 061F A9 06			lda #>dlist
    56 0621 8D 31 02			sta sdlstl+1
    57
    58 					; initialize text pointer to the first character of scroll text
    59 0624 A9 00			lda <text
    60 0626 85 C0			sta txtptr
    61 0628 A9 09			lda >text
    62 062A 85 C1			sta txtptr+1
    63
    64 062C A2 07			ldx #$07
    65 062E 8E 04 D4		main	stx hscrol
    66
    67 					; delay
    68 0631 A5 14			lda rtclok+2
    69 0633 C5 14		delay	cmp rtclok+2
    70 0635 F0 FC			beq delay
    71
    72 0637 CA				dex
    73 0638 10 F4			bpl main
    74 063A A2 07			ldx #$07
    75 063C 8E 04 D4			stx hscrol
    76
    77 					; move data in viewport two characters left
    78 063F A0 00			ldy #$00
    79 0641 B9 02 40		move	lda video1+2,y
    80 0644 99 00 40			sta video1,y
    81 0647 B9 42 40			lda video2+2,y
    82 064A 99 40 40			sta video2,y
    83 064D C8				iny
    84 064E C0 2A			cpy #$2a
    85 0650 D0 EF			bne move
    86
    87 					; put new character of scroll text
    88 0652 A0 00			ldy #$00
    89 0654 B1 C0			lda (txtptr),y
    90 0656 0A				asl
    91 0657 8D 2A 40			sta video1+$2a
    92 065A 8D 6A 40			sta video2+$2a
    93 065D 18				clc
    94 065E 69 01			adc #$01
    95 0660 8D 2B 40			sta video1+$2b
    96 0663 8D 6B 40			sta video2+$2b
    97
    98 					; point to the next character of scroll text
    99 0666 E6 C0			inc txtptr
   100 0668 D0 02			bne skip
   101 066A E6 C1			inc txtptr+1
   102 066C			skip
   103
   104 					; check if it is the end of scroll text
   105 066C A5 C0			lda txtptr
   106 066E C9 5E			cmp #<textend
   107 0670 D0 BC			bne main
   108 0672 A5 C1			lda txtptr+1
   109 0674 C9 09			cmp #>textend
   110 0676 D0 B6			bne main
   111
   112 					; initialize text pointer to the first character of scroll text
   113 0678 A9 00			lda <text
   114 067A 85 C0			sta txtptr
   115 067C A9 09			lda >text
   116 067E 85 C1			sta txtptr+1
   117
   118 0680 4C 2E 06			jmp main
   119
   120
   121 					; display list interrupt routines
   122 0683 48			dli1	pha
   123 0684 A9 70			lda #>fonts0
   124 0686 8D 0A D4			sta wsync
   125 0689 8D 09 D4			sta chbase
   126 068C A9 98			lda #<dli2
   127 068E 8D 00 02			sta vdslst
   128 0691 A9 06			lda #>dli2
   129 0693 8D 01 02			sta vdslst+1
   130 0696 68				pla
   131 0697 40				rti
   132
   133 0698 48			dli2	pha
   134 0699 A9 80			lda #>fonts1
   135 069B 8D 0A D4			sta wsync
   136 069E 8D 09 D4			sta chbase
   137 06A1 A9 83			lda #<dli1
   138 06A3 8D 00 02			sta vdslst
   139 06A6 A9 06			lda #>dli1
   140 06A8 8D 01 02			sta vdslst+1
   141 06AB 68				pla
   142 06AC 40				rti
   143
   144
   145 					; display list
   146 06AD 70 70		dlist	.byte $70, $70			; 16 blank lines
   147 06AF F0				.byte $70 | $80			; 8 blank lines + DLI
   148 06B0 D2				.byte $02 | $80 | $40 | $10	; mode 2 + DLI + LMS + HSCROLL
   149 06B1 00 40			.byte $00, $40			; screen address
   150 06B3 52				.byte $02 | $40 | $10		; mode 2 + LMS + HSCROLL
   151 06B4 40 40			.byte $40, $40			; screen address
   152 06B6 41				.byte $41			; jump and wait for VBLANK
   153 06B7 AD 06			.byte <dlist, >dlist		; jump to this address
   154
   155
   156 					; data comes from "2x2ScrollData1.json"
   157 06B9				icl '2X2DTA1.ASM'
     1 				; "Scroll Packer" v0.1, 2020-07-16 22:28:43, "2x2ScrollData1\2x2ScrollData1.json"
     2
     3 06B9				org $900
     4
     5 				; scroll text, length: 94, unique characters: 51
     6 0900-095D> 00 01 02 03 + text	.byte $00, $01, $02, $03, $00, $04, $05, $03	;  Hey guy
     7 0908 06 07 00 08 09 0A + 	.byte $06, $07, $00, $08, $09, $0a, $00, $09	; s! It['s] t
     8 0910 0B 02 00 0C 02 0D + 	.byte $0b, $02, $00, $0c, $02, $0d, $0e, $00	; he demo 
     9 0918 0E 0F 00 10 11 12 + 	.byte $0e, $0f, $00, $10, $11, $12, $13, $14	; of "SCRO
    10 0920 15 15 16 17 18 12 + 	.byte $15, $15, $16, $17, $18, $12, $19, $1a	; LL PACKE
    11 0928 13 10 1B 00 1C 00 + 	.byte $13, $10, $1b, $00, $1c, $00, $1d, $1e	; R"[...] [Atari logo] IS
    12 0930 1F 20 21 22 1F 23 + 	.byte $1f, $20, $21, $22, $1f, $23, $22, $1e	;  THE BES
    13 0938 20 24 1F 25 26 02 + 	.byte $20, $24, $1f, $25, $26, $02, $04, $26	; T! Gżegż
    14 0940 27 28 29 2A 00 25 + 	.byte $27, $28, $29, $2a, $00, $25, $2b, $2c	; ółka GŻE
    15 0948 25 2B 2D 2E 2F 30 + 	.byte $25, $2b, $2d, $2e, $2f, $30, $00, $00	; GŻÓŁKA  
    16 0950 00 31 02 00 32 00 + 	.byte $00, $31, $02, $00, $32, $00, $03, $0e	;  We [filled heart] yo
    17 0958 05 07 00 00 00 00		.byte $05, $07, $00, $00, $00, $00	; u!    
    18 095E			textend
    19
    20 095E				org $7000
    21
    22 				; fonts data, row no. 0
    23 7000-732F> 00 00 00 00 + fonts0	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {n} 0_0
    24 7008 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {n} 1_0
    25 7010 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $80, $ff	; "H" {n} 0_0
    26 7018 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $f8	; "H" {n} 1_0
    27 7020 00 00 00 00 0F 30 + 	.byte $00, $00, $00, $00, $0f, $30, $40, $80	; "e" {s} 0_0
    28 7028 00 00 00 00 80 60 + 	.byte $00, $00, $00, $00, $80, $60, $10, $08	; "e" {s} 1_0
    29 7030 00 00 00 00 80 80 + 	.byte $00, $00, $00, $00, $80, $80, $80, $80	; "y" {s} 0_0
    30 7038 00 00 00 00 08 08 + 	.byte $00, $00, $00, $00, $08, $08, $08, $08	; "y" {s} 1_0
    31 7040 00 00 00 00 0F 30 + 	.byte $00, $00, $00, $00, $0f, $30, $40, $80	; "g" {s} 0_0
    32 7048 00 00 00 00 80 60 + 	.byte $00, $00, $00, $00, $80, $60, $10, $08	; "g" {s} 1_0
    33 7050 00 00 00 00 80 80 + 	.byte $00, $00, $00, $00, $80, $80, $80, $80	; "u" {s} 0_0
    34 7058 00 00 00 00 08 08 + 	.byte $00, $00, $00, $00, $08, $08, $08, $08	; "u" {s} 1_0
    35 7060 00 00 00 00 1F 60 + 	.byte $00, $00, $00, $00, $1f, $60, $80, $80	; "s" {s} 0_0
    36 7068 00 00 00 00 C0 30 + 	.byte $00, $00, $00, $00, $c0, $30, $08, $00	; "s" {s} 1_0
    37 7070 10 10 10 10 10 10 + 	.byte $10, $10, $10, $10, $10, $10, $10, $10	; "!" {n} 0_0
    38 7078 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "!" {n} 1_0
    39 7080 3F 02 02 02 02 02 + 	.byte $3f, $02, $02, $02, $02, $02, $02, $02	; "I" {n} 0_0
    40 7088 E0 00 00 00 00 00 + 	.byte $e0, $00, $00, $00, $00, $00, $00, $00	; "I" {n} 1_0
    41 7090 04 04 04 04 FF 04 + 	.byte $04, $04, $04, $04, $ff, $04, $04, $04	; "t" {s} 0_0
    42 7098 00 00 00 00 E0 00 + 	.byte $00, $00, $00, $00, $e0, $00, $00, $00	; "t" {s} 1_0
    43 70A0 80 80 40 00 1F 60 + 	.byte $80, $80, $40, $00, $1f, $60, $80, $80	; "['s]" {s} 0_0
    44 70A8 00 00 00 00 C0 30 + 	.byte $00, $00, $00, $00, $c0, $30, $08, $00	; "['s]" {s} 1_0
    45 70B0 80 80 80 80 8F B0 + 	.byte $80, $80, $80, $80, $8f, $b0, $c0, $80	; "h" {s} 0_0
    46 70B8 00 00 00 00 80 60 + 	.byte $00, $00, $00, $00, $80, $60, $10, $08	; "h" {s} 1_0
    47 70C0 00 00 00 00 0F 30 + 	.byte $00, $00, $00, $00, $0f, $30, $40, $80	; "d" {s} 0_0
    48 70C8 08 08 08 08 88 68 + 	.byte $08, $08, $08, $08, $88, $68, $18, $08	; "d" {s} 1_0
    49 70D0 00 00 00 00 38 45 + 	.byte $00, $00, $00, $00, $38, $45, $82, $82	; "m" {s} 0_0
    50 70D8 00 00 00 00 E0 10 + 	.byte $00, $00, $00, $00, $e0, $10, $08, $08	; "m" {s} 1_0
    51 70E0 00 00 00 00 0F 30 + 	.byte $00, $00, $00, $00, $0f, $30, $40, $80	; "o" {s} 0_0
    52 70E8 00 00 00 00 80 60 + 	.byte $00, $00, $00, $00, $80, $60, $10, $08	; "o" {s} 1_0
    53 70F0 03 04 08 08 08 08 + 	.byte $03, $04, $08, $08, $08, $08, $08, $08	; "f" {s} 0_0
    54 70F8 E0 10 08 08 00 00 + 	.byte $e0, $10, $08, $08, $00, $00, $00, $00	; "f" {s} 1_0
    55 7100 06 06 06 06 00 00 + 	.byte $06, $06, $06, $06, $00, $00, $00, $00	; """ {b} 0_0
    56 7108 60 60 60 60 00 00 + 	.byte $60, $60, $60, $60, $00, $00, $00, $00	; """ {b} 1_0
    57 7110 0F 38 60 C0 C0 60 + 	.byte $0f, $38, $60, $c0, $c0, $60, $38, $0f	; "S" {b} 0_0
    58 7118 80 E0 30 18 18 00 + 	.byte $80, $e0, $30, $18, $18, $00, $00, $80	; "S" {b} 1_0
    59 7120 07 1C 30 60 60 C0 + 	.byte $07, $1c, $30, $60, $60, $c0, $c0, $c0	; "C" {b} 0_0
    60 7128 80 E0 30 18 18 00 + 	.byte $80, $e0, $30, $18, $18, $00, $00, $00	; "C" {b} 1_0
    61 7130 FF C0 C0 C0 C0 C0 + 	.byte $ff, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "R" {b} 0_0
    62 7138 80 E0 30 18 18 30 + 	.byte $80, $e0, $30, $18, $18, $30, $e0, $80	; "R" {b} 1_0
    63 7140 07 1D 30 60 60 C0 + 	.byte $07, $1d, $30, $60, $60, $c0, $c0, $c0	; "O" {b} 0_0
    64 7148 00 C0 60 30 30 18 + 	.byte $00, $c0, $60, $30, $30, $18, $18, $18	; "O" {b} 1_0
    65 7150 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0	; "L" {b} 0_0
    66 7158 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "L" {b} 1_0
    67 7160 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {b} 0_0
    68 7168 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {b} 1_0
    69 7170 FF C0 C0 C0 C0 C0 + 	.byte $ff, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "P" {b} 0_0
    70 7178 80 E0 30 18 18 30 + 	.byte $80, $e0, $30, $18, $18, $30, $e0, $80	; "P" {b} 1_0
    71 7180 07 1D 30 60 60 C0 + 	.byte $07, $1d, $30, $60, $60, $c0, $c0, $ff	; "A" {b} 0_0
    72 7188 00 C0 60 30 30 18 + 	.byte $00, $c0, $60, $30, $30, $18, $18, $f8	; "A" {b} 1_0
    73 7190 C0 C0 C0 C0 C1 C3 + 	.byte $c0, $c0, $c0, $c0, $c1, $c3, $c6, $fc	; "K" {b} 0_0
    74 7198 18 30 60 C0 80 00 + 	.byte $18, $30, $60, $c0, $80, $00, $00, $00	; "K" {b} 1_0
    75 71A0 FF C0 C0 C0 C0 C0 + 	.byte $ff, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "E" {b} 0_0
    76 71A8 F8 00 00 00 00 00 + 	.byte $f8, $00, $00, $00, $00, $00, $00, $e0	; "E" {b} 1_0
    77 71B0 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "[...]" {n} 0_0
    78 71B8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "[...]" {n} 1_0
    79 71C0 00 0A 0A 0A 0A 0A + 	.byte $00, $0a, $0a, $0a, $0a, $0a, $0a, $0a	; "[Atari logo]" {n} 0_0
    80 71C8 00 80 80 80 80 80 + 	.byte $00, $80, $80, $80, $80, $80, $80, $80	; "[Atari logo]" {n} 1_0
    81 71D0 1F 03 03 03 03 03 + 	.byte $1f, $03, $03, $03, $03, $03, $03, $03	; "I" {slop} 0_0
    82 71D8 E0 00 00 00 00 00 + 	.byte $e0, $00, $00, $00, $00, $00, $00, $00	; "I" {slop} 1_0
    83 71E0 1F 20 40 C0 C0 C0 + 	.byte $1f, $20, $40, $c0, $c0, $c0, $40, $20	; "S" {slop} 0_0
    84 71E8 C0 20 10 08 00 00 + 	.byte $c0, $20, $10, $08, $00, $00, $00, $00	; "S" {slop} 1_0
    85 71F0 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {slop} 0_0
    86 71F8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {slop} 1_0
    87 7200 7F 03 03 03 03 03 + 	.byte $7f, $03, $03, $03, $03, $03, $03, $03	; "T" {slop} 0_0
    88 7208 F8 00 00 00 00 00 + 	.byte $f8, $00, $00, $00, $00, $00, $00, $00	; "T" {slop} 1_0
    89 7210 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "H" {slop} 0_0
    90 7218 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $f8	; "H" {slop} 1_0
    91 7220 FF C0 C0 C0 C0 C0 + 	.byte $ff, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "E" {slop} 0_0
    92 7228 F8 00 00 00 00 00 + 	.byte $f8, $00, $00, $00, $00, $00, $00, $80	; "E" {slop} 1_0
    93 7230 FF C0 C0 C0 C0 C0 + 	.byte $ff, $c0, $c0, $c0, $c0, $c0, $c0, $ff	; "B" {slop} 0_0
    94 7238 00 80 40 20 10 08 + 	.byte $00, $80, $40, $20, $10, $08, $10, $e0	; "B" {slop} 1_0
    95 7240 30 30 30 30 30 30 + 	.byte $30, $30, $30, $30, $30, $30, $30, $30	; "!" {slop} 0_0
    96 7248 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "!" {slop} 1_0
    97 7250 07 18 20 40 40 80 + 	.byte $07, $18, $20, $40, $40, $80, $80, $81	; "G" {n} 0_0
    98 7258 80 60 10 08 08 00 + 	.byte $80, $60, $10, $08, $08, $00, $00, $f8	; "G" {n} 1_0
    99 7260 00 03 03 00 FF 00 + 	.byte $00, $03, $03, $00, $ff, $00, $00, $00	; "ż" {Polish} 0_0
   100 7268 00 00 00 00 F8 08 + 	.byte $00, $00, $00, $00, $f8, $08, $10, $20	; "ż" {Polish} 1_0
   101 7270 00 01 02 00 0F 30 + 	.byte $00, $01, $02, $00, $0f, $30, $40, $80	; "ó" {Polish} 0_0
   102 7278 80 00 00 00 80 60 + 	.byte $80, $00, $00, $00, $80, $60, $10, $08	; "ó" {Polish} 1_0
   103 7280 20 20 20 24 28 30 + 	.byte $20, $20, $20, $24, $28, $30, $20, $60	; "ł" {Polish} 0_0
   104 7288 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "ł" {Polish} 1_0
   105 7290 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $80, $80	; "k" {s} 0_0
   106 7298 00 00 00 08 10 20 + 	.byte $00, $00, $00, $08, $10, $20, $40, $80	; "k" {s} 1_0
   107 72A0 00 00 00 00 0F 30 + 	.byte $00, $00, $00, $00, $0f, $30, $40, $80	; "a" {s} 0_0
   108 72A8 00 00 00 00 80 68 + 	.byte $00, $00, $00, $00, $80, $68, $18, $08	; "a" {s} 1_0
   109 72B0 06 06 FF 00 00 00 + 	.byte $06, $06, $ff, $00, $00, $00, $00, $01	; "Ż" {Polish} 0_0
   110 72B8 00 00 F8 10 20 40 + 	.byte $00, $00, $f8, $10, $20, $40, $80, $00	; "Ż" {Polish} 1_0
   111 72C0 FF 80 80 80 80 80 + 	.byte $ff, $80, $80, $80, $80, $80, $80, $ff	; "E" {n} 0_0
   112 72C8 F8 00 00 00 00 00 + 	.byte $f8, $00, $00, $00, $00, $00, $00, $e0	; "E" {n} 1_0
   113 72D0 00 01 07 1A 24 40 + 	.byte $00, $01, $07, $1a, $24, $40, $40, $80	; "Ó" {Polish} 0_0
   114 72D8 80 00 00 C0 20 10 + 	.byte $80, $00, $00, $c0, $20, $10, $10, $08	; "Ó" {Polish} 1_0
   115 72E0 20 20 20 20 22 24 + 	.byte $20, $20, $20, $20, $22, $24, $28, $30	; "Ł" {Polish} 0_0
   116 72E8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "Ł" {Polish} 1_0
   117 72F0 80 80 80 80 80 81 + 	.byte $80, $80, $80, $80, $80, $81, $82, $fc	; "K" {n} 0_0
   118 72F8 08 10 20 40 80 00 + 	.byte $08, $10, $20, $40, $80, $00, $00, $00	; "K" {n} 1_0
   119 7300 07 18 20 40 40 80 + 	.byte $07, $18, $20, $40, $40, $80, $80, $ff	; "A" {n} 0_0
   120 7308 00 C0 20 10 10 08 + 	.byte $00, $c0, $20, $10, $10, $08, $08, $f8	; "A" {n} 1_0
   121 7310 80 80 80 80 80 82 + 	.byte $80, $80, $80, $80, $80, $82, $85, $85	; "W" {n} 0_0
   122 7318 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $08	; "W" {n} 1_0
   123 7320 00 38 7D FF FF FF + 	.byte $00, $38, $7d, $ff, $ff, $ff, $ff, $7f	; "[filled heart]" {n} 0_0
   124 7328 00 E0 F0 F8 F8 F8 + 	.byte $00, $e0, $f0, $f8, $f8, $f8, $f8, $f0	; "[filled heart]" {n} 1_0
   125 7330			fonts0e
   126
   127 7330				org $8000
   128
   129 				; fonts data, row no. 1
   130 8000-832F> 00 00 00 00 + fonts1	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {n} 0_1
   131 8008 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {n} 1_1
   132 8010 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $80, $00	; "H" {n} 0_1
   133 8018 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $00	; "H" {n} 1_1
   134 8020 80 FF 80 80 40 30 + 	.byte $80, $ff, $80, $80, $40, $30, $0f, $00	; "e" {s} 0_1
   135 8028 08 F8 00 00 08 30 + 	.byte $08, $f8, $00, $00, $08, $30, $c0, $00	; "e" {s} 1_1
   136 8030 40 30 0F 00 80 60 + 	.byte $40, $30, $0f, $00, $80, $60, $1f, $00	; "y" {s} 0_1
   137 8038 18 68 88 08 10 60 + 	.byte $18, $68, $88, $08, $10, $60, $80, $00	; "y" {s} 1_1
   138 8040 80 60 1F 00 80 60 + 	.byte $80, $60, $1f, $00, $80, $60, $1f, $00	; "g" {s} 0_1
   139 8048 18 68 88 08 10 60 + 	.byte $18, $68, $88, $08, $10, $60, $80, $00	; "g" {s} 1_1
   140 8050 80 80 80 80 40 30 + 	.byte $80, $80, $80, $80, $40, $30, $0f, $00	; "u" {s} 0_1
   141 8058 08 08 08 08 18 68 + 	.byte $08, $08, $08, $08, $18, $68, $88, $00	; "u" {s} 1_1
   142 8060 60 1F 00 00 80 60 + 	.byte $60, $1f, $00, $00, $80, $60, $1f, $00	; "s" {s} 0_1
   143 8068 00 C0 30 08 08 30 + 	.byte $00, $c0, $30, $08, $08, $30, $c0, $00	; "s" {s} 1_1
   144 8070 10 10 00 00 10 28 + 	.byte $10, $10, $00, $00, $10, $28, $10, $00	; "!" {n} 0_1
   145 8078 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "!" {n} 1_1
   146 8080 02 02 02 02 02 02 + 	.byte $02, $02, $02, $02, $02, $02, $3f, $00	; "I" {n} 0_1
   147 8088 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $e0, $00	; "I" {n} 1_1
   148 8090 04 04 04 04 04 02 + 	.byte $04, $04, $04, $04, $04, $02, $01, $00	; "t" {s} 0_1
   149 8098 00 00 00 08 08 10 + 	.byte $00, $00, $00, $08, $08, $10, $e0, $00	; "t" {s} 1_1
   150 80A0 60 1F 00 00 80 60 + 	.byte $60, $1f, $00, $00, $80, $60, $1f, $00	; "['s]" {s} 0_1
   151 80A8 00 E0 18 04 04 18 + 	.byte $00, $e0, $18, $04, $04, $18, $e0, $00	; "['s]" {s} 1_1
   152 80B0 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $80, $00	; "h" {s} 0_1
   153 80B8 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $00	; "h" {s} 1_1
   154 80C0 80 80 80 80 40 30 + 	.byte $80, $80, $80, $80, $40, $30, $0f, $00	; "d" {s} 0_1
   155 80C8 08 08 08 08 18 68 + 	.byte $08, $08, $08, $08, $18, $68, $88, $00	; "d" {s} 1_1
   156 80D0 82 82 82 82 82 82 + 	.byte $82, $82, $82, $82, $82, $82, $82, $00	; "m" {s} 0_1
   157 80D8 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $00	; "m" {s} 1_1
   158 80E0 80 80 80 80 40 30 + 	.byte $80, $80, $80, $80, $40, $30, $0f, $00	; "o" {s} 0_1
   159 80E8 08 08 08 08 10 60 + 	.byte $08, $08, $08, $08, $10, $60, $80, $00	; "o" {s} 1_1
   160 80F0 08 FF 08 08 08 08 + 	.byte $08, $ff, $08, $08, $08, $08, $08, $00	; "f" {s} 0_1
   161 80F8 00 80 00 00 00 00 + 	.byte $00, $80, $00, $00, $00, $00, $00, $00	; "f" {s} 1_1
   162 8100 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; """ {b} 0_1
   163 8108 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; """ {b} 1_1
   164 8110 00 00 C0 C0 60 38 + 	.byte $00, $00, $c0, $c0, $60, $38, $0f, $00	; "S" {b} 0_1
   165 8118 E0 30 18 18 30 E0 + 	.byte $e0, $30, $18, $18, $30, $e0, $80, $00	; "S" {b} 1_1
   166 8120 C0 C0 60 60 30 1C + 	.byte $c0, $c0, $60, $60, $30, $1c, $07, $00	; "C" {b} 0_1
   167 8128 00 00 18 18 30 E0 + 	.byte $00, $00, $18, $18, $30, $e0, $80, $00	; "C" {b} 1_1
   168 8130 C3 C1 C0 C0 C0 C0 + 	.byte $c3, $c1, $c0, $c0, $c0, $c0, $c0, $00	; "R" {b} 0_1
   169 8138 00 80 C0 60 30 18 + 	.byte $00, $80, $c0, $60, $30, $18, $18, $00	; "R" {b} 1_1
   170 8140 C0 C0 60 60 30 1D + 	.byte $c0, $c0, $60, $60, $30, $1d, $07, $00	; "O" {b} 0_1
   171 8148 18 18 30 30 60 C0 + 	.byte $18, $18, $30, $30, $60, $c0, $00, $00	; "O" {b} 1_1
   172 8150 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $ff, $00	; "L" {b} 0_1
   173 8158 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "L" {b} 1_1
   174 8160 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {b} 0_1
   175 8168 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {b} 1_1
   176 8170 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $c0, $00	; "P" {b} 0_1
   177 8178 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "P" {b} 1_1
   178 8180 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $c0, $00	; "A" {b} 0_1
   179 8188 18 18 18 18 18 18 + 	.byte $18, $18, $18, $18, $18, $18, $18, $00	; "A" {b} 1_1
   180 8190 C6 C3 C1 C0 C0 C0 + 	.byte $c6, $c3, $c1, $c0, $c0, $c0, $c0, $00	; "K" {b} 0_1
   181 8198 00 00 80 C0 60 30 + 	.byte $00, $00, $80, $c0, $60, $30, $18, $00	; "K" {b} 1_1
   182 81A0 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $ff, $00	; "E" {b} 0_1
   183 81A8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "E" {b} 1_1
   184 81B0 00 00 00 00 11 2A + 	.byte $00, $00, $00, $00, $11, $2a, $11, $00	; "[...]" {n} 0_1
   185 81B8 00 00 00 00 10 A8 + 	.byte $00, $00, $00, $00, $10, $a8, $10, $00	; "[...]" {n} 1_1
   186 81C0 12 12 22 22 42 82 + 	.byte $12, $12, $22, $22, $42, $82, $00, $00	; "[Atari logo]" {n} 0_1
   187 81C8 40 40 20 20 10 08 + 	.byte $40, $40, $20, $20, $10, $08, $00, $00	; "[Atari logo]" {n} 1_1
   188 81D0 03 03 03 03 03 03 + 	.byte $03, $03, $03, $03, $03, $03, $1f, $00	; "I" {slop} 0_1
   189 81D8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $e0, $00	; "I" {slop} 1_1
   190 81E0 1F 00 00 80 40 20 + 	.byte $1f, $00, $00, $80, $40, $20, $1f, $00	; "S" {slop} 0_1
   191 81E8 C0 20 10 08 10 20 + 	.byte $c0, $20, $10, $08, $10, $20, $c0, $00	; "S" {slop} 1_1
   192 81F0 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {slop} 0_1
   193 81F8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; " " {slop} 1_1
   194 8200 03 03 03 03 03 03 + 	.byte $03, $03, $03, $03, $03, $03, $03, $00	; "T" {slop} 0_1
   195 8208 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "T" {slop} 1_1
   196 8210 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $c0, $00	; "H" {slop} 0_1
   197 8218 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $00	; "H" {slop} 1_1
   198 8220 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $ff, $00	; "E" {slop} 0_1
   199 8228 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "E" {slop} 1_1
   200 8230 C0 C0 C0 C0 C0 C0 + 	.byte $c0, $c0, $c0, $c0, $c0, $c0, $ff, $00	; "B" {slop} 0_1
   201 8238 10 08 10 20 40 80 + 	.byte $10, $08, $10, $20, $40, $80, $00, $00	; "B" {slop} 1_1
   202 8240 30 30 00 00 30 78 + 	.byte $30, $30, $00, $00, $30, $78, $30, $00	; "!" {slop} 0_1
   203 8248 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $00, $00	; "!" {slop} 1_1
   204 8250 80 80 40 40 20 18 + 	.byte $80, $80, $40, $40, $20, $18, $07, $00	; "G" {n} 0_1
   205 8258 08 08 08 08 10 60 + 	.byte $08, $08, $08, $08, $10, $60, $80, $00	; "G" {n} 1_1
   206 8260 00 07 18 20 40 80 + 	.byte $00, $07, $18, $20, $40, $80, $ff, $00	; "ż" {Polish} 0_1
   207 8268 C0 00 00 00 00 00 + 	.byte $c0, $00, $00, $00, $00, $00, $f8, $00	; "ż" {Polish} 1_1
   208 8270 80 80 80 80 40 30 + 	.byte $80, $80, $80, $80, $40, $30, $0f, $00	; "ó" {Polish} 0_1
   209 8278 08 08 08 08 10 60 + 	.byte $08, $08, $08, $08, $10, $60, $80, $00	; "ó" {Polish} 1_1
   210 8280 A0 20 20 20 20 10 + 	.byte $a0, $20, $20, $20, $20, $10, $0f, $00	; "ł" {Polish} 0_1
   211 8288 00 00 00 20 20 40 + 	.byte $00, $00, $00, $20, $20, $40, $80, $00	; "ł" {Polish} 1_1
   212 8290 81 FE 81 80 80 80 + 	.byte $81, $fe, $81, $80, $80, $80, $80, $00	; "k" {s} 0_1
   213 8298 00 00 00 80 40 20 + 	.byte $00, $00, $00, $80, $40, $20, $10, $00	; "k" {s} 1_1
   214 82A0 80 80 80 80 40 30 + 	.byte $80, $80, $80, $80, $40, $30, $0f, $00	; "a" {s} 0_1
   215 82A8 08 08 08 08 18 68 + 	.byte $08, $08, $08, $08, $18, $68, $88, $00	; "a" {s} 1_1
   216 82B0 02 04 08 10 20 40 + 	.byte $02, $04, $08, $10, $20, $40, $ff, $00	; "Ż" {Polish} 0_1
   217 82B8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "Ż" {Polish} 1_1
   218 82C0 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $ff, $00	; "E" {n} 0_1
   219 82C8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "E" {n} 1_1
   220 82D0 80 80 40 40 20 18 + 	.byte $80, $80, $40, $40, $20, $18, $07, $00	; "Ó" {Polish} 0_1
   221 82D8 08 08 10 10 20 C0 + 	.byte $08, $08, $10, $10, $20, $c0, $00, $00	; "Ó" {Polish} 1_1
   222 82E0 20 60 A0 20 20 20 + 	.byte $20, $60, $a0, $20, $20, $20, $3f, $00	; "Ł" {Polish} 0_1
   223 82E8 00 00 00 00 00 00 + 	.byte $00, $00, $00, $00, $00, $00, $f8, $00	; "Ł" {Polish} 1_1
   224 82F0 82 81 80 80 80 80 + 	.byte $82, $81, $80, $80, $80, $80, $80, $00	; "K" {n} 0_1
   225 82F8 00 00 80 40 20 10 + 	.byte $00, $00, $80, $40, $20, $10, $08, $00	; "K" {n} 1_1
   226 8300 80 80 80 80 80 80 + 	.byte $80, $80, $80, $80, $80, $80, $80, $00	; "A" {n} 0_1
   227 8308 08 08 08 08 08 08 + 	.byte $08, $08, $08, $08, $08, $08, $08, $00	; "A" {n} 1_1
   228 8310 88 88 90 90 A0 A0 + 	.byte $88, $88, $90, $90, $a0, $a0, $c0, $00	; "W" {n} 0_1
   229 8318 88 88 48 48 28 28 + 	.byte $88, $88, $48, $48, $28, $28, $18, $00	; "W" {n} 1_1
   230 8320 3F 1F 0F 07 02 00 + 	.byte $3f, $1f, $0f, $07, $02, $00, $00, $00	; "[filled heart]" {n} 0_1
   231 8328 E0 C0 80 00 00 00 + 	.byte $e0, $c0, $80, $00, $00, $00, $00, $00	; "[filled heart]" {n} 1_1
   232 8330			fonts1e
